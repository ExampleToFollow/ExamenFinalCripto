version: '3.8'

# ============================================================================
# LABORATORIO COMPLETO DE VULNERABILIDADES - DOCKER COMPOSE
# ============================================================================
# Descripci√≥n: Entorno integral para pr√°ctica de pentesting y an√°lisis de seguridad
# Autor: Hineill David C√©spedes Espinoza 
# Curso : Criptograf√≠a y hacking √©tico
# Versi√≥n: 2.0
# Fecha: 2025
# ============================================================================

services:
  # =========================================================================
  # M√ÅQUINA ATACANTE - KALI LINUX
  # =========================================================================
  kali:
    image: kalilinux/kali-rolling
    container_name: kali-attacker
    hostname: kali-attacker
    networks:
      cybersec-lab:
        ipv4_address: 172.25.0.10
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    volumes:
      - ./shared:/shared
      - ./tools:/root/tools
      - ./reports:/root/reports
      - ./wordlists:/usr/share/wordlists/custom
    environment:
      - TERM=xterm-256color
      - DEBIAN_FRONTEND=noninteractive
    command: >
      bash -c "
        echo 'Configurando Kali Linux...' &&
        apt update -qq &&
        apt install -y -qq --no-install-recommends \
          nmap sqlmap gobuster nikto metasploit-framework \
          curl wget vim nano net-tools iputils-ping dnsutils \
          python3-pip hydra john hashcat whatweb dirb enum4linux \
          smbclient nbtscan onesixtyone snmp-mibs-downloader \
          wfuzz burpsuite zaproxy fierce dnsrecon masscan \
          responder impacket-scripts crackmapexec &&
        pip3 install --quiet requests beautifulsoup4 &&
        echo '=====================================' &&
        echo 'üî¥ Kali Linux configurado exitosamente' &&
        echo 'Herramientas instaladas: nmap, sqlmap, metasploit, burp, etc.' &&
        echo 'Para acceder: docker exec -it kali-attacker bash' &&
        echo '=====================================' &&
        /bin/bash
      "
    depends_on:
      - dvwa
      - juiceshop
      - webgoat

  # =========================================================================
  # APLICACIONES WEB VULNERABLES
  # =========================================================================
  
  # DVWA - Damn Vulnerable Web Application
  dvwa:
    image: vulnerables/web-dvwa
    container_name: dvwa-target
    hostname: dvwa-target
    networks:
      cybersec-lab:
        ipv4_address: 172.25.0.20
    ports:
      - "8080:80"
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=dvwa
      - MYSQL_USER=dvwa
      - MYSQL_PASSWORD=password
    volumes:
      - dvwa_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # OWASP Juice Shop
  juiceshop:
    image: bkimminich/juice-shop
    container_name: juiceshop-target
    hostname: juiceshop-target
    networks:
      cybersec-lab:
        ipv4_address: 172.25.0.21
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      - NODE_ENV=unsafe
      - CTF_KEY=zLp@.-6fMW6L-7R3b!9uR_K!4NVyWGKq
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # OWASP WebGoat
  webgoat:
    image: webgoat/webgoat-8.0
    container_name: webgoat-target
    hostname: webgoat-target
    networks:
      cybersec-lab:
        ipv4_address: 172.25.0.22
    ports:
      - "8081:8080"
    restart: unless-stopped
    environment:
      - WEBGOAT_PORT=8080
      - WEBWOLF_PORT=9090
    volumes:
      - webgoat_data:/home/webgoat/.webgoat
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/WebGoat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # bWAPP - Buggy Web Application
  bwapp:
    image: raesene/bwapp
    container_name: bwapp-target
    hostname: bwapp-target
    networks:
      cybersec-lab:
        ipv4_address: 172.25.0.23
    ports:
      - "8082:80"
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=bug
      - MYSQL_DATABASE=bwapp
    volumes:
      - bwapp_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # DVNA - Damn Vulnerable Node Application
  dvna:
    image: appsecco/dvna:sqlite
    container_name: dvna-target
    hostname: dvna-target
    networks:
      cybersec-lab:
        ipv4_address: 172.25.0.24
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      - SQLITE_DB=/tmp/dvna.db
    volumes:
      - dvna_data:/tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =========================================================================
  # SISTEMAS OPERATIVOS VULNERABLES
  # =========================================================================
  
  # Metasploitable 2
  metasploitable:
    image: tleemcjr/metasploitable2
    container_name: metasploitable-target
    hostname: metasploitable-target
    networks:
      cybersec-lab:
        ipv4_address: 172.25.0.30
    ports:
      - "2222:22"    # SSH
      - "2121:21"    # FTP
      - "8083:80"    # HTTP
      - "1433:1433"  # SQL Server
      - "3306:3306"  # MySQL
      - "5432:5432"  # PostgreSQL
      - "5900:5900"  # VNC
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    volumes:
      - metasploitable_data:/var/log
    healthcheck:
      test: ["CMD", "service", "ssh", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =========================================================================
  # SERVICIOS ADICIONALES
  # =========================================================================
  
  # MySQL Database Vulnerable
  mysql-db:
    image: mysql:5.7
    container_name: mysql-vulnerable
    hostname: mysql-vulnerable
    networks:
      cybersec-lab:
        ipv4_address: 172.25.0.40
    ports:
      - "3307:3306"
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=testdb
      - MYSQL_USER=testuser
      - MYSQL_PASSWORD=testpass
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    command: >
      --sql-mode=""
      --general-log=1
      --general-log-file=/var/lib/mysql/general.log
      --log-bin-trust-function-creators=1
      --bind-address=0.0.0.0
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # FTP Server Vulnerable
  ftp-server:
    image: stilliard/pure-ftpd:hardened
    container_name: ftp-vulnerable
    hostname: ftp-vulnerable
    networks:
      cybersec-lab:
        ipv4_address: 172.25.0.41
    ports:
      - "2120:21"
      - "30000-30009:30000-30009"
    restart: unless-stopped
    environment:
      - PUBLICHOST=172.25.0.41
      - FTP_USER_NAME=ftpuser
      - FTP_USER_PASS=ftppass
      - FTP_USER_HOME=/home/ftpuser
      - ADDED_FLAGS=-d -j
    volumes:
      - ftp_data:/home/ftpuser
      - ftp_data:/etc/pure-ftpd/passwd
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "21"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =========================================================================
  # HERRAMIENTAS DE GESTI√ìN
  # =========================================================================
  
  # Portainer - Gesti√≥n visual de contenedores
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer-manager
    hostname: portainer-manager
    networks:
      cybersec-lab:
        ipv4_address: 172.25.0.50
    ports:
      - "9000:9000"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000"]
      interval: 30s
      timeout: 10s
      retries: 3

# ============================================================================
# CONFIGURACI√ìN DE REDES
# ============================================================================
networks:
  cybersec-lab:
    name: cybersec-lab
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1
    driver_opts:
      com.docker.network.bridge.name: cybersec-lab
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"

# ============================================================================
# VOL√öMENES PERSISTENTES
# ============================================================================
volumes:
  dvwa_data:
    name: dvwa_data
    driver: local
  webgoat_data:
    name: webgoat_data
    driver: local
  bwapp_data:
    name: bwapp_data
    driver: local
  dvna_data:
    name: dvna_data
    driver: local
  metasploitable_data:
    name: metasploitable_data
    driver: local
  mysql_data:
    name: mysql_data
    driver: local
  ftp_data:
    name: ftp_data
    driver: local
  portainer_data:
    name: portainer_data
    driver: local

# ============================================================================
# COMANDOS DE GESTI√ìN R√ÅPIDA
# ============================================================================
# 
# INICIAR LABORATORIO:
#   docker-compose up -d
#
# VERIFICAR ESTADO:
#   docker-compose ps
#   docker-compose logs [servicio]
#
# ACCEDER A KALI:
#   docker exec -it kali-attacker bash
#
# VERIFICAR SERVICIOS:
#   docker exec -it kali-attacker nmap -sn 172.25.0.0/16
#
# DETENER LABORATORIO:
#   docker-compose down
#
# LIMPIAR COMPLETAMENTE:
#   docker-compose down -v --remove-orphans
#   docker system prune -a
#
# REINICIAR SERVICIO ESPEC√çFICO:
#   docker-compose restart [nombre-servicio]
#
# VER LOGS EN TIEMPO REAL:
#   docker-compose logs -f [servicio]
#
# ============================================================================